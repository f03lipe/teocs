#!/usr/bin/env python3

from functools import reduce

class Scope(object):
    """ Implements a Scope API.
    example of core mapping:
    self.core = [
        {'name': 'foo', 'type': 'bar', 'kind': 'toast', 'index': 1/0},
        ...
    ]

    in the usual code, name and type are strings, kind is one among STATIC,
    FIELD, ARG or VAR.

    the programmer mustn't touch the self.core variable. (?) :O
    """

    _in_core = lambda self, name: sum([e['name'] == name for e in self.core])

    def __init__(self, name):
        self.core = []
        self.name = name

    def add(self, var_name, var_type, var_kind):
        """ adds the mapped_entry to the self.core """
        
        if self._in_core(var_name):
            raise Exception("already existent entry.", self.core)
        
        self.core.append(dict(name=var_name, type=var_type, kind=var_kind,
                                        index=self.get_index(var_kind)))

    def exists(self, var_name):
        """ checks if variable name exists in self.core """
        return self._in_core(var_name)

    def get_index(self, kind):
        """ returns a valid index for variable usage """
        
        occ = [e['index'] for e in self.core if e['kind'] == kind]
        if not occ: # no vars of same kind yet
            if kind == 'argument':
                return 1
            return 0
        return max(occ)+1

    def get_object(self, var_name):
        """ returns map of the current variable in the symbol table """

        for e in self.core:
            if e['name'] == var_name:
                return e
        return False
    
    def __repr__(self):
        return str(self.core)

class SymbolTable(object):
    """ Implements a SymbolTable API.
    manages multiple scope objects
    """

    def __init__(self):
        """ ok ok """
        self.scopes = dict()
        self.add_scope("class")
    
    def add_scope(self, name):
        """ adds a new scope to the symbol table """

        if name in self.scopes:
            raise Exception("already existent scope.")
        self.scopes[name] = Scope(name)
