#!/usr/bin/env python3

GREENON = "\x1b[32m"
REDON = "\33[31m"
RESETCOLOR = "\x1b[0m"

class VMWriter(object):
    """ API to write VM code.
    the class doesn't test or verify the general input. """
    
    def _write(self, what):
        print(REDON)
        print(what)
        print(RESETCOLOR)
        self.output.write(what+'\n')
        
    write = lambda self, string: self._write(string)

    def __init__(self, output):
        """ initiates and sets output file """
        self.output = output
    
    def comment(self, comment):
        if not comment.startswith("//") or comment.startswith("/*"):
            if len(comment) < 80:
                comment = '// '+comment
            else:
                comment = '/* %s */' % comment
        self._write(comment)
    
    def close(self):
        self.output.close()

    def writePush(self, segment, index):
        """ writes 'push <segment> <index>' """
        self._write("push %s %s" % (segment, index))

    def writePop(self, segment, index):
        """ writes 'pop <segment> <index>' """
        self._write("pop %s %s" % (segment, index))

    def writeArithmetic(self, command):
        """ writes '<command>' """
        self._write("%s" % command)

    def writeLabel(self, label):
        """ writes 'label <label>' """
        self._write("label %s" % label)

    def writeGoto(self, label):
        """ writes 'goto <label>' """
        self._write("goto %s" % label)

    def writeIf(self, label):
        """ writes 'if-goto <label>' """
        self._write("if-goto %s" % label)
    
    def writeCall(self, label, nArgs):
        """ writes 'call <label> <nArgs> """
        self._write("call %s %s" % (label, nArgs))

    def writeFunction(self, name, nLocals):
        """ writes 'function <name> <nLocals>' """
        self._write("function %s %s" % (name, nLocals))

    def writeReturn(self):
        """ writes 'return' """
        self._writes("return")

